`include "disciplines.vams"
`include "constants.h"

   nature distance 
   access = Metr;
   units = "m";
   abstol = 0.01n;
   endnature
 
   discipline Distance
   potential distance;
   enddiscipline
 
   module Memristor(p, n,w_position);
   input p;
   output n;
   output w_position;
 
   electrical p, n,gnd;
   Distance w_position;
   ground gnd;
    
   parameter real model = 1; 
   parameter real window=5;
   parameter real dt=2e-3;                      
   parameter real init_state=0.5;           

   parameter real Roff = 100000000;                                 
   parameter real Ron = 1000;
   parameter real D = 3e-09;
   parameter real uv = 1e-15;
   parameter real w_multiplied = 1e9;      
   parameter real p_coeff = 2;   
   parameter real J = 1.5;             
   parameter real p_window_noise=1e-18; 
   parameter real threshhold_voltage=0;    
    

    real w; 
    real dwdt;
    real w_last;
    real R;
    real sign_multply;                                     
    real stp_multply;                                     
    real first_iteration;
    parameter real c_off = 3.5e-6;
    parameter real c_on = 40e-6;
    parameter real i_off = 115e-6;
    parameter real i_on = -8.9e-6;
    parameter real x_c = 107e-12;
    parameter real b = 500e-6;
    parameter real a_on = 2e-9;
    parameter real a_off = 1.2e-9;                                       
    real x;
    real dxdt;
    real x_last; 
    parameter real K_on=-10;
    parameter real K_off=5e-4;
    parameter real Alpha_on=3;
    parameter real Alpha_off=1;
    parameter real v_on=-0.2;
    parameter real v_off=0.02;
    parameter real IV_relation=0; 
    parameter real x_on=0;
    parameter real x_off=3e-09;  

    real lambda;

    parameter real alpha = 2;
    parameter real beta  = 9;                                
    parameter real c     = 0.01;
    parameter real g     = 4;
    parameter real N     = 14;                                 
    parameter real q     = 13;                                 
    parameter real a     = 4;    

 analog function integer sign;            
     real arg; input arg;
     sign = (arg >= 0 ? 1 : -1 );
 endfunction
  
 analog function integer stp;        
     real arg; input arg;
     stp = (arg >= 0 ? 1 : 0 );
 endfunction
 
 analog begin                                                 
 
    if(first_iteration==0) begin
        w_last=init_state*D;    
        x_last=init_state*D;    
    end

 
if (model==1) begin 
 
    if (V(p,n) >= v_off) begin 
        dxdt =K_off*pow((V(p,n)/v_off-1),Alpha_off);
    end
 
    if (V(p,n) <= v_on) begin
        dxdt =K_on*pow((V(p,n)/v_on-1),Alpha_on);
    end
 
        if ((v_on<V(p,n)) && (V(p,n)<v_off)) begin
    dxdt=0;
    end

    if (window==0) begin 
     
    x=x_last+dt*dxdt;
        
    end 
  
if (window==1) begin 
 
 	if (sign(V(p,n))==1) begin
    	sign_multply=0;
    	if(x<p_window_noise) begin
    		sign_multply=1;
    	end
    end
    if (sign(V(p,n))==-1) begin
    	sign_multply=0;    
    	if(x>(D-p_window_noise)) begin
    		sign_multply=-1;
    	end
   	end


        x=x_last+dt*dxdt*(1-pow(pow((2*x_last/D-1),2),p_coeff))+sign_multply*p_window_noise;
       
    end  

    if (window==2) begin 
 
        if (stp(-V(p,n))==1) begin
            stp_multply=1;
        end
        if (stp(-V(p,n))==0) begin
            stp_multply=0;                
            end
    
        x=x_last+dt*dxdt*(1-pow(pow((x_last/D-stp_multply),2),p_coeff));      
    end  

    if (window==3) begin  
 	if (sign(V(p,n))==1) begin
    	sign_multply=0;
    	if(x<p_window_noise) begin
    		sign_multply=1;
    	end
    end
    if (sign(V(p,n))==-1) begin
    	sign_multply=0;    
    	if(x>(D-p_window_noise)) begin
    		sign_multply=-1;
    	end
   	end

            x=x_last+dt*dxdt*J*(1-pow((pow((x_last/D-0.5),2)+0.75),p_coeff))+sign_multply*p_window_noise;
 
    end  
    if (window==5) begin 
 
           if (V(p,n) >= 0) begin     
           x=x_last+dt*dxdt*exp(-exp((x_last-a_off)/x_c));
           end
    
       if (V(p,n) < 0) begin
           x=x_last+dt*dxdt*exp(-exp((a_on-x_last)/x_c));
       end
 
        end       
    if (x>=D) begin
    dxdt=0;             
    x=D;
    end
    
    if (x<=0) begin
    dxdt=0;
    x=0;
    end
                     
       lambda = ln(Roff/Ron);
        x_last=x;
        Metr(w_position) <+ x/D;
           
     if (IV_relation==1) begin 
        
        V(p,n) <+ Ron*I(p,n)*exp(lambda*(x-x_on)/(x_off-x_on));
            
     end
         
     else if (IV_relation==0) begin 
 
        V(p,n) <+ (Roff*x/D+Ron*(1-x/D))*I(p,n);
 
     end
 
    first_iteration=1;                                 
 
end 
 
  end                                            
  
endmodule

